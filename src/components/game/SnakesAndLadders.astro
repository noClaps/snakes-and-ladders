---
interface Props {
    snakesAndLaddersArrays: {
        snakes: number[][];
        ladders: number[][];
    };
}

const { snakesAndLaddersArrays } = Astro.props;
---

<canvas
    hx-get="/partials/update-snakes-and-ladders"
    hx-trigger="click from:#reset"
    hx-swap="outerHTML"
    id="snakes-and-ladders"
    data-snakes-and-ladders={JSON.stringify(snakesAndLaddersArrays)}
>
</canvas>

<style>
    canvas {
        position: absolute;
        top: 0;
        left: 0;
        z-index: -1;
    }
</style>

<script>
    document.addEventListener("htmx:load", createSnakesAndLadders);

    function createSnakesAndLadders() {
        const canvas = document.querySelector<HTMLCanvasElement>(
            "#snakes-and-ladders",
        )!;
        const ctx = canvas.getContext("2d")!;
        const { snakes, ladders } = JSON.parse(
            canvas.dataset.snakesAndLadders!,
        ) as { snakes: number[][]; ladders: number[][] };

        canvas.width = document.documentElement.clientWidth;
        canvas.height = document.documentElement.clientHeight;

        for (const snake of snakes) {
            const square0 = document
                .querySelector(`#position-${snake[0]}`)!
                .getBoundingClientRect();
            const square1 = document
                .querySelector(`#position-${snake[1]}`)!
                .getBoundingClientRect();

            const x0 = square0.x + square0.width / 2;
            const y0 = square0.y + square0.height / 2;
            const x1 = square1.x + square1.width / 2;
            const y1 = square1.y + square1.height / 2;

            ctx.beginPath();
            ctx.lineWidth = 2;
            ctx.strokeStyle = "red";
            ctx.moveTo(x0, y0);
            ctx.lineTo(x1, y1);
            ctx.stroke();
        }

        for (const ladder of ladders) {
            const square0 = document
                .querySelector(`#position-${ladder[0]}`)!
                .getBoundingClientRect();
            const square1 = document
                .querySelector(`#position-${ladder[1]}`)!
                .getBoundingClientRect();

            const x0 = square0.x + square0.width / 2;
            const y0 = square0.y + square0.height / 2;
            const x1 = square1.x + square1.width / 2;
            const y1 = square1.y + square1.height / 2;

            ctx.beginPath();
            ctx.lineWidth = 2;
            ctx.strokeStyle = "green";
            ctx.moveTo(x0, y0);
            ctx.lineTo(x1, y1);
            ctx.stroke();
        }
    }
</script>
